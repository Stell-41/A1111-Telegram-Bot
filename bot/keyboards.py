# bot/keyboards.py
from aiogram import types
from aiogram.types import InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from services.prompt_logic import load_character_data
from bot.middleware import load_settings
from services.user_data_service import get_user_data

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–µ–º–ø–ª–µ—Ä–æ–≤ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
SAMPLERS = [
    "DPM++ 2M", "DPM++ SDE", "DPM++ 2M SDE", "DPM++ 2M SDE Heun", 
    "DPM++ 2S a", "DPM++ 3M SDE", "Euler a", "Euler", "LMS", 
    "Heun", "DPM2", "DPM2 a", "DPM fast", "DPM adaptive", 
    "Restart", "DDIM", "DDIM CFG++", "PLMS", "UniPC", "LCM"
]

# --- –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –ö–õ–ê–í–ò–ê–¢–£–†–ê –í–´–ë–û–†–ê –ü–ï–†–°–û–ù–ê–ñ–ï–ô ---
def get_character_selection_keyboard(selected_ids: list = None) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–¥–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.
    –û—Ç–º–µ—á–∞–µ—Ç —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≥–∞–ª–æ—á–∫–æ–π.
    """
    if selected_ids is None:
        selected_ids = []
        
    builder = InlineKeyboardBuilder()
    characters = load_character_data()
    
    for char_id, char_data in characters.items():
        name = char_data.get("name", char_id)
        # –î–æ–±–∞–≤–ª—è–µ–º –≥–∞–ª–æ—á–∫—É, –µ—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ —É–∂–µ –≤—ã–±—Ä–∞–Ω
        text = f"‚úÖ {name}" if char_id in selected_ids else name
        builder.button(
            text=text,
            callback_data=f"toggle_char_{char_id}"
        )
    builder.adjust(1)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ", —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂
    if selected_ids:
        builder.row(types.InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="chars_done"))
        
    return builder.as_markup()

# --- –ù–û–í–´–ï –ö–õ–ê–í–ò–ê–¢–£–†–´ –î–õ–Ø –°–û–•–†–ê–ù–ï–ù–ù–´–• –ü–†–û–ú–¢–û–í ---

def get_saved_prompts_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–º—Ç–∞–º–∏ –∏ –æ–ø—Ü–∏—è–º–∏."""
    builder = InlineKeyboardBuilder()
    user_data = get_user_data(user_id)
    saved_prompts = user_data.get("saved_prompts", [])
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º—Ç–∞
    for i, prompt in enumerate(saved_prompts):
        prompt_short = (prompt[:30] + '...') if len(prompt) > 30 else prompt
        builder.button(text=f"üìã {prompt_short}", callback_data=f"use_prompt_{i}")
    
    builder.adjust(1) # –ö–∞–∂–¥—ã–π –ø—Ä–æ–º—Ç –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    action_buttons = []
    if len(saved_prompts) > 0:
        action_buttons.append(types.InlineKeyboardButton(
            text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º—Ç", callback_data="manage_prompts_delete"
        ))
    
    action_buttons.append(types.InlineKeyboardButton(
        text="‚å®Ô∏è –í–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π/–≤—Ä–µ–º–µ–Ω–Ω—ã–π", callback_data="manage_prompts_new"
    ))
    builder.row(*action_buttons)
    
    return builder.as_markup()

def get_delete_prompts_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–º—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."""
    builder = InlineKeyboardBuilder()
    user_data = get_user_data(user_id)
    saved_prompts = user_data.get("saved_prompts", [])
    
    for i, prompt in enumerate(saved_prompts):
        prompt_short = (prompt[:30] + '...') if len(prompt) > 30 else prompt
        builder.button(text=f"‚ùå {prompt_short}", callback_data=f"delete_prompt_{i}")
        
    builder.adjust(1)
    builder.row(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_prompt_menu"))
    return builder.as_markup()

def get_character_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞."""
    builder = InlineKeyboardBuilder()
    characters = load_character_data()
    for char_id, char_data in characters.items():
        builder.button(
            text=char_data.get("name", char_id),
            callback_data=f"select_char_{char_id}"
        )
    builder.adjust(1)
    return builder.as_markup()

def get_settings_keyboard(settings: dict) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    builder = InlineKeyboardBuilder()
    
    model_name = settings.get("model_name")
    if model_name:
        aliases = load_settings().get("model_aliases", {})
        display_name = aliases.get(model_name, model_name) 
    else:
        display_name = "–ù–µ –≤—ã–±—Ä–∞–Ω–∞"
    
    display_name_short = (display_name[:25] + '...') if len(display_name) > 25 else display_name

    builder.button(text=f"Model: {display_name_short}", callback_data="edit_setting_model_name")
    builder.button(text=f"Sampler: {settings['sampler_name']}", callback_data="edit_setting_sampler_name")
    builder.button(text=f"Steps: {settings['steps']}", callback_data="edit_setting_steps")
    builder.button(text=f"CFG Scale: {settings['cfg_scale']}", callback_data="edit_setting_cfg_scale")
    builder.button(text=f"–®–∏—Ä–∏–Ω–∞: {settings['width']}", callback_data="edit_setting_width")
    builder.button(text=f"–í—ã—Å–æ—Ç–∞: {settings['height']}", callback_data="edit_setting_height")
    
    builder.button(text="‚úÖ –ì–æ—Ç–æ–≤–æ, –≤–≤–µ—Å—Ç–∏ –ø—Ä–æ–º—Ç", callback_data="settings_done")
    
    builder.adjust(1, 2, 2, 2, 1)
    return builder.as_markup()

def get_model_selection_keyboard(models: list, aliases: dict) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for model_file in models:
        display_name = aliases.get(model_file, model_file)
        builder.button(
            text=display_name,
            callback_data=f"set_model_{model_file}"
        )
    builder.adjust(1)
    builder.row(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="back_to_settings"))
    return builder.as_markup()

def get_generation_keyboard(prompt_index: int, total_prompts: int) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    prev_index = prompt_index - 1 if prompt_index > 0 else total_prompts - 1
    next_index = prompt_index + 1 if prompt_index < total_prompts - 1 else 0
    builder.button(text="‚¨ÖÔ∏è", callback_data=f"nav_{prev_index}")
    builder.button(text=f"{prompt_index + 1}/{total_prompts}", callback_data="ignore")
    builder.button(text="‚û°Ô∏è", callback_data=f"nav_{next_index}")
    builder.button(text="üñºÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ", callback_data=f"generate_img_{prompt_index}")
    builder.button(text="üî¢ –£–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data="generate_batch_start")
    builder.button(text="üí• –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ", callback_data="generate_all")
    builder.adjust(3, 1, 2)
    return builder.as_markup()

def get_sampler_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for sampler in SAMPLERS:
        builder.button(
            text=sampler,
            callback_data=f"set_sampler_{sampler}"
        )
    builder.adjust(2)
    builder.row(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="back_to_settings"))
    return builder.as_markup()

# --- –ù–û–í–ê–Ø –ö–õ–ê–í–ò–ê–¢–£–†–ê –î–õ–Ø –î–ï–ô–°–¢–í–ò–ô –ü–û–°–õ–ï –ì–ï–ù–ï–†–ê–¶–ò–ò ---
def get_post_generation_keyboard(current_index: int, total_prompts: int) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    """
    builder = InlineKeyboardBuilder()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –ø—Ä–æ–º—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    remaining_prompts = total_prompts - (current_index + 1)
    
    builder.button(text="üìñ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø—Ä–æ–º—Ç", callback_data="post_gen_show_prompts")
    
    if remaining_prompts > 0:
        builder.button(text=f"üí• –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ ({remaining_prompts})", callback_data="post_gen_all_remaining")
        builder.button(text="üî¢ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ N...", callback_data="post_gen_batch_start")

    builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="post_gen_main_menu")
    builder.adjust(1) # –í—Å–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Å—Ç–æ–ª–±–µ—Ü
    return builder.as_markup()

# --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ö–õ–ê–í–ò–ê–¢–£–†–´ –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–ò ---

def get_admin_keyboard() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", callback_data="admin_add_char")
    builder.button(text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º", callback_data="admin_bot_control")
    builder.button(text="üñºÔ∏è –ù–∞–∑–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π", callback_data="admin_manage_aliases")
    builder.button(text="üìä –õ–∏–º–∏—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–π", callback_data="admin_manage_limits") # <-- –ù–û–í–ê–Ø –ö–ù–û–ü–ö–ê
    builder.button(text="üì¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="admin_set_channel")
    builder.button(text="‚≠êÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Whitelist", callback_data="admin_manage_whitelist")
    builder.button(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="admin_cancel")
    builder.adjust(1)
    return builder.as_markup()

def get_bot_control_keyboard(current_status: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ —Å–æ –≤—Å–µ–º–∏ 4-–º—è —Ä–µ–∂–∏–º–∞–º–∏."""
    statuses = {
        "active": "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω",
        "full_stop": "üõë –ü–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã–∫–ª—é—á–µ–Ω",
        "prompts_only": "üìù –¢–æ–ª—å–∫–æ –ø—Ä–æ–º—Ç—ã",
        "whitelist_only": "‚≠êÔ∏è –¢–æ–ª—å–∫–æ Whitelist"
    }
    builder = InlineKeyboardBuilder()
    for status_code, status_name in statuses.items():
        text = f"‚ñ∂Ô∏è {status_name}" if current_status == status_code else status_name
        builder.button(text=text, callback_data=f"set_status_{status_code}")
    
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back_to_main_menu")
    builder.adjust(1)
    return builder.as_markup()

def get_whitelist_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ Whitelist", callback_data="admin_whitelist_add")
    builder.button(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –∏–∑ Whitelist", callback_data="admin_whitelist_remove")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back_to_main_menu")
    builder.adjust(1)
    return builder.as_markup()

def get_alias_management_keyboard(models: list, aliases: dict) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for model_file in models:
        display_name = aliases.get(model_file, "–ù–µ –∑–∞–¥–∞–Ω–æ")
        model_file_short = (model_file[:20] + '...') if len(model_file) > 20 else model_file
        builder.button(
            text=f"{model_file_short} -> {display_name}",
            callback_data=f"alias_model_{model_file}"
        )
    builder.adjust(1)
    builder.row(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back_to_main_menu"))
    return builder.as_markup()