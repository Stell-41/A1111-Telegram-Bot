# bot/handlers/user_handlers.py
from aiogram import Router, F, types
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.types import BufferedInputFile

from bot.states import GenerateFlow
from bot.keyboards import get_character_keyboard, get_generation_keyboard, get_settings_keyboard
from services.prompt_logic import generate_prompts_for_character
from services.a1111_api_service import generate_image

router = Router()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_SETTINGS = {
    "steps": 25,
    "cfg_scale": 7.0,
    "width": 512,
    "height": 768,
    "sampler_name": "DPM++ 2M Karras"
}

def format_prompt_message(prompts: list, index: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º –∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–º –ø—Ä–æ–º—Ç–æ–º."""
    positive, negative = prompts[index]
    return (
        f"**–í–∞—Ä–∏–∞–Ω—Ç {index + 1}/{len(prompts)}**\n\n"
        f"‚úÖ **Prompt:**\n`{positive}`\n\n"
        f"‚ùå **Negative Prompt:**\n`{negative}`"
    )

@router.message(CommandStart())
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º—Ç–æ–≤ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ A1111.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /generate, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å."
    )

@router.message(Command("generate"))
async def cmd_generate(message: types.Message, state: FSMContext):
    await state.clear()
    await state.set_state(GenerateFlow.choosing_character)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", reply_markup=get_character_keyboard())

@router.callback_query(GenerateFlow.choosing_character, F.data.startswith("select_char_"))
async def select_character(callback: types.CallbackQuery, state: FSMContext):
    character_id = callback.data.split("_")[2]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(character_id=character_id, settings=DEFAULT_SETTINGS.copy())
    
    # –ú–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    await state.set_state(GenerateFlow.waiting_for_base_prompt)
    await callback.message.edit_text(
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏—Ö –∏–ª–∏ –Ω–∞–∂–∞—Ç—å '–ì–æ—Ç–æ–≤–æ' –∏ —Å—Ä–∞–∑—É –≤–≤–µ—Å—Ç–∏ –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–º—Ç.",
        reply_markup=get_settings_keyboard(DEFAULT_SETTINGS)
    )
    await callback.answer()

@router.callback_query(GenerateFlow.waiting_for_base_prompt, F.data == "settings_done")
async def settings_done(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ì–æ—Ç–æ–≤–æ' –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    await callback.message.edit_text("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–º—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, `masterpiece, best quality`):")
    await callback.answer()

@router.callback_query(GenerateFlow.waiting_for_base_prompt, F.data.startswith("edit_setting_"))
async def edit_setting(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    setting_key = callback.data.split("_")[-1]
    await state.update_data(editing_setting=setting_key)
    await state.set_state(GenerateFlow.waiting_for_setting_value)
    
    await callback.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è **{setting_key}**:", parse_mode="Markdown")
    await callback.answer()

@router.message(GenerateFlow.waiting_for_setting_value)
async def enter_setting_value(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_data = await state.get_data()
    setting_key = user_data.get("editing_setting")
    new_value = message.text

    try:
        if setting_key in ["steps", "width", "height"]:
            new_value = int(new_value)
        elif setting_key == "cfg_scale":
            new_value = float(new_value)
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return

    settings = user_data.get("settings")
    settings[setting_key] = new_value
    await state.update_data(settings=settings)
    
    await state.set_state(GenerateFlow.waiting_for_base_prompt)
    await message.answer(
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –ú–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ –∏–ª–∏ –Ω–∞–∂–∞—Ç—å '–ì–æ—Ç–æ–≤–æ'.",
        reply_markup=get_settings_keyboard(settings)
    )

@router.message(GenerateFlow.waiting_for_base_prompt)
async def enter_base_prompt(message: types.Message, state: FSMContext):
    await state.update_data(base_prompt=message.text)
    user_data = await state.get_data()
    character_id = user_data["character_id"]
    
    prompts = generate_prompts_for_character(character_id, message.text)
    if not prompts:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º—Ç—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.")
        await state.clear()
        return

    await state.update_data(prompts=prompts, current_index=0)
    await state.set_state(GenerateFlow.viewing_results)
    
    await message.answer(
        format_prompt_message(prompts, 0),
        parse_mode="Markdown",
        reply_markup=get_generation_keyboard(0, len(prompts))
    )

@router.callback_query(GenerateFlow.viewing_results, F.data.startswith("nav_"))
async def navigate_prompts(callback: types.CallbackQuery, state: FSMContext):
    new_index = int(callback.data.split("_")[1])
    await state.update_data(current_index=new_index)
    user_data = await state.get_data()
    prompts = user_data["prompts"]
    
    await callback.message.edit_text(
        format_prompt_message(prompts, new_index),
        parse_mode="Markdown",
        reply_markup=get_generation_keyboard(new_index, len(prompts))
    )
    await callback.answer()

@router.callback_query(GenerateFlow.viewing_results, F.data.startswith("generate_img_"))
async def generate_image_callback(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‚è≥ –í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è...", reply_markup=None)
    
    user_data = await state.get_data()
    prompts = user_data["prompts"]
    settings = user_data["settings"]
    index = int(callback.data.split("_")[2])
    positive_prompt, negative_prompt = prompts[index]

    image_bytes = generate_image(positive_prompt, negative_prompt, settings)
    
    await callback.message.edit_text(
        format_prompt_message(prompts, index),
        parse_mode="Markdown",
        reply_markup=get_generation_keyboard(index, len(prompts))
    )

    if image_bytes:
        photo = BufferedInputFile(image_bytes, filename="generated_image.png")
        await callback.message.answer_photo(photo, caption="‚úÖ –í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!")
    else:
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –∑–∞–ø—É—â–µ–Ω –ª–∏ A1111 –∏ –¥–æ—Å—Ç—É–ø–Ω—ã –ª–∏ API.")
    
    await callback.answer()

@router.callback_query(F.data == "ignore")
async def ignore_callback(callback: types.CallbackQuery):
    await callback.answer()